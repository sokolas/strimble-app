name: CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_type:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check-diff.outputs.changed }}
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        name: checkout
        # with:
        #   submodules: recursive
          
      - name: get diff
        run: |
          git fetch --tags origin
          echo CURR_TAG=`git tag --sort "-committerdate" | cut -d$'\n' -f1` >> $GITHUB_ENV
          echo PREV_TAG=`git tag --sort "-committerdate" | cut -d$'\n' -f2` >> $GITHUB_ENV

      - name: check submodules changes
        id: check-diff
        run: |
          echo changed=`git diff $PREV_TAG..$CURR_TAG --name-only -- 3rdparty strimble-starter`
          echo changed=`git diff $PREV_TAG..$CURR_TAG --name-only -- 3rdparty strimble-starter` >> $GITHUB_OUTPUT
          
  build:
    runs-on: windows-2019
    needs: check_type
    if: needs.check_type.outputs.changed != ''
    defaults:
      run:
        shell: cmd
    env:
      INSTALL_DIR: ${{github.workspace}}\deps
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        name: checkout
        with:
          submodules: recursive

      - name: create directories
        run: |
          mkdir deps
          mkdir deps\include
          mkdir deps\lib
          mkdir deps\bin
          mkdir deps\bin\clibs
          
      - name: check env
        run: |
          echo 1
          echo ${{env.INSTALL_DIR}}
          echo 2
          echo %INSTALL_DIR%
          
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          sdk: 10.0.22621.0
          
      - name: Install Rust (Stable)
        run:
          curl https://sh.rustup.rs -sSf | sh -s -- -y

      # skip copying the lua bindings - because we have our own modified version in lualibs
      - name: build pollnet
        working-directory: ${{github.workspace}}\3rdparty\pollnet
        run: |
          cargo build --release
      
      - name: copy pollnet binary
        working-directory: ${{github.workspace}}\3rdparty\pollnet
        run: |
          copy "target\release\pollnet.dll" "%INSTALL_DIR%\bin\clibs"

      - name: build raudio
        working-directory: ${{github.workspace}}\3rdparty\raudio\projects\CMake
        run: |
          cmake -DSUPPORT_MODULE_RAUDIO=TRUE -DRAUDIO_STANDALONE=TRUE -DSUPPORT_SHARED_LIBRARY=TRUE -DSUPPORT_FILEFORMAT_WAV=TRUE -DSUPPORT_FILEFORMAT_OGG=TRUE -DSUPPORT_FILEFORMAT_MP3=TRUE -DSUPPORT_FILEFORMAT_FLAC=TRUE -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE
          msbuild ALL_BUILD.vcxproj /p:configuration=MinSizeRel /p:platform=x64
          copy "MinSizeRel\raudio.dll" "%INSTALL_DIR%\bin\clibs"
          
      - name: build LuaJIT
        run:  "msvcbuild.bat"
        working-directory: ${{github.workspace}}\strimble-starter\LuaJIT\src

      - name: create luajit directories
        run: |
          mkdir deps\include\luajit-2.1
          
      - name: copy luajit headers
        shell: pwsh
        run: Copy-Item ".\strimble-starter\LuaJIT\src\lauxlib.h",".\strimble-starter\LuaJIT\src\lua.h",".\strimble-starter\LuaJIT\src\lua.hpp",".\strimble-starter\LuaJIT\src\luaconf.h",".\strimble-starter\LuaJIT\src\lualib.h",".\strimble-starter\LuaJIT\src\luajit.h" -Destination ".\deps\include\luajit-2.1"

      - name: copy luajit libs
        shell: pwsh
        run: Copy-Item ".\strimble-starter\LuaJIT\src\lua51.dll",".\strimble-starter\LuaJIT\src\lua51.lib"-Destination ".\deps\lib"
      
      - name: copy luajit executable
        shell: pwsh
        run: Copy-Item ".\strimble-starter\LuaJIT\src\luajit.exe" -Destination ".\deps\bin"
        
      - name: build starter
        working-directory: ${{github.workspace}}\strimble-starter
        run: "msbuild strimble-starter.vcxproj /p:configuration=release /p:platform=x64"
      
      - name: copy starter
        working-directory: ${{github.workspace}}\strimble-starter
        run: |
          copy "x64\release\strimble-starter.exe" "%INSTALL_DIR%\bin\strimble.exe"
      
      - name: build LFS
        working-directory: ${{github.workspace}}\3rdparty\luafilesystem
        run: |
          cl /c /O1 /MD /I "%INSTALL_DIR%\include\luajit-2.1" src\lfs.c
          link /dll /def:src\lfs.def /out:lfs.dll lfs.obj "%INSTALL_DIR%\lib\lua51.lib"
          copy lfs.dll "%INSTALL_DIR%\bin\clibs"
          
      - name: build lua-utf8
        working-directory: ${{github.workspace}}\3rdparty\luautf8
        run: |
          cl lutf8lib.c /I "%INSTALL_DIR%/include/luajit-2.1" /DLUA_BUILD_AS_DLL=1 /link lua51.lib /LIBPATH:"%INSTALL_DIR%/lib" -dll -out:lua-utf8.dll
          copy lua-utf8.dll "%INSTALL_DIR%\bin\clibs"
      
      - name: build lsqlite
        working-directory: ${{github.workspace}}\3rdparty\lsqlite
        run: |
          cl sqlite3.c lsqlite3.c /O1 /I "%INSTALL_DIR%/include/luajit-2.1" /DLUA_BUILD_AS_DLL=1 /DLSQLITE_VERSION=\"0.9.5\" /Dluaopen_lsqlite3=luaopen_lsqlite3complete /DSQLITE_ENABLE_JSON1=1 /link lua51.lib /LIBPATH:"%INSTALL_DIR%/lib" /EXPORT:luaopen_lsqlite3complete -dll -out:lsqlite3complete.dll
          copy lsqlite3complete.dll "%INSTALL_DIR%\bin\clibs"
      
      - name: build wxwidgets
        working-directory: ${{github.workspace}}\3rdparty\wxwidgets\build\msw
        run: |
          nmake /f makefile.vc BUILD=MinSizeRel SHARED=1 TARGET_CPU=X64 MONOLITHIC=1 RUNTIME_LIBS=static
          mkdir ${{env.INSTALL_DIR}}\lib\vc_x64_dll
          xcopy ..\..\lib\vc_x64_dll\mswu ${{env.INSTALL_DIR}}\lib\vc_x64_dll\mswu\ /s /e /i
          xcopy ..\..\lib\vc_x64_dll\*.dll ${{env.INSTALL_DIR}}\lib\vc_x64_dll\
          xcopy ..\..\lib\vc_x64_dll\*.lib ${{env.INSTALL_DIR}}\lib\vc_x64_dll\
          xcopy ..\..\include\* ${{env.INSTALL_DIR}}\include\ /s /e
      
      - name: build wxlua
        working-directory: ${{github.workspace}}\3rdparty\wxlua\wxLua
        run: |
          cmake -DCMAKE_INSTALL_PREFIX="%INSTALL_DIR%" -DCMAKE_BUILD_TYPE="MinSizeRel" -DBUILD_SHARED_LIBS=TRUE ^
            -DCMAKE_CXX_FLAGS="-DLUA_COMPAT_MODULE /EHsc" ^
            -DwxWidgets_COMPONENTS="mono" ^
            -DwxLuaBind_COMPONENTS="xrc;xml;media;richtext;propgrid;html;adv;core;net;base" ^
            -DwxWidgets_CONFIGURATION="mswu" ^
            -DwxWidgets_ROOT_DIR="%INSTALL_DIR%" ^
            -DwxWidgets_VERSION="3.2.6" ^
            -DwxWidgets_LIB_DIR="%INSTALL_DIR%/lib/vc_x64_dll" ^
            -DwxLua_LUA_LIBRARY_USE_BUILTIN=FALSE ^
            -DwxLua_LUA_INCLUDE_DIR="%INSTALL_DIR%/include/luajit-2.1" -DwxLua_LUA_LIBRARY="%INSTALL_DIR%/lib/lua51.lib" .
          msbuild ALL_BUILD.vcxproj /p:configuration=MinSizeRel /p:platform=x64
          copy bin\MinSizeRel\wx.dll "%INSTALL_DIR%\bin\clibs\wx.dll"
          
          
      - name: list the results
        shell: bash
        run: |
          ls -lR deps/bin
          ls -lR deps/lib

      - name: pack assets
        # run: Compress-Archive ".\include",".\LuaJIT\src\luajit.exe",".\LuaJIT\src\lua51.dll",".\x64\release\strimble-starter.exe" -Destination strimble.zip
        run: |
          mkdir strimble\bin\clibs
          xcopy "%INSTALL_DIR%\bin\strimble.exe" strimble
          xcopy "%INSTALL_DIR%\bin\luajit.exe" strimble
          xcopy "%INSTALL_DIR%\lib\lua51.dll" strimble
          xcopy "%INSTALL_DIR%\lib\vc_x64_dll\wxmsw32u_vc_custom.dll" strimble
          xcopy "%INSTALL_DIR%\bin\clibs" strimble\bin\clibs /s /e
          mkdir strimble\data
          xcopy data strimble\data /s /e
          mkdir strimble\images
          xcopy images strimble\images /s /e
          mkdir strimble\lualibs
          xcopy lualibs strimble\lualibs /s /e
          mkdir strimble\scripts
          xcopy scripts strimble\scripts /s /e
          mkdir strimble\src
          xcopy src strimble\src /s /e
          copy LICENSE strimble
          7z a "strimble.zip" strimble

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: Fhwang0926/upload-release-asset@v1.1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_name: strimble-${{ github.ref }}.zip # path + filename
          asset_path: ./strimble.zip
          asset_label: latest
